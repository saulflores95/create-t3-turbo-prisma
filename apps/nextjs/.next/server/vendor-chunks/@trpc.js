"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc";
exports.ids = ["vendor-chunks/@trpc"];
exports.modules = {

/***/ "(rsc)/../../node_modules/@trpc/server/dist/TRPCError-6a1653a4.mjs":
/*!*******************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/TRPCError-6a1653a4.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCError),\n/* harmony export */   g: () => (/* binding */ getTRPCErrorFromUnknown)\n/* harmony export */ });\n/**\n * @internal\n */ function isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\nfunction getTRPCErrorFromUnknown(cause) {\n    if (cause instanceof TRPCError) {\n        return cause;\n    }\n    const trpcError = new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        cause\n    });\n    // Inherit stack from error\n    if (cause instanceof Error && cause.stack) {\n        trpcError.stack = cause.stack;\n    }\n    return trpcError;\n}\nclass UnknownCauseError extends Error {\n}\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) {\n        return cause;\n    }\n    const type = typeof cause;\n    if (type === \"undefined\" || type === \"function\" || cause === null) {\n        return undefined;\n    }\n    // Primitive types just get wrapped in an error\n    if (type !== \"object\") {\n        return new Error(String(cause));\n    }\n    // If it's an object, we'll create a synthetic error\n    if (isObject(cause)) {\n        const err = new UnknownCauseError();\n        for(const key in cause){\n            err[key] = cause[key];\n        }\n        return err;\n    }\n    return undefined;\n}\nclass TRPCError extends Error {\n    constructor(opts){\n        const cause = getCauseFromUnknown(opts.cause);\n        const message = opts.message ?? cause?.message ?? opts.code;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.code = opts.code;\n        this.name = this.constructor.name;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L1RSUENFcnJvci02YTE2NTNhNC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Q0FFQyxHQUFHLFNBQVNBLFNBQVNDLEtBQUs7SUFDdkIsNkJBQTZCO0lBQzdCLE9BQU8sQ0FBQyxDQUFDQSxTQUFTLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsVUFBVSxPQUFPQSxVQUFVO0FBQ2hFO0FBRUEsU0FBU0csd0JBQXdCQyxLQUFLO0lBQ2xDLElBQUlBLGlCQUFpQkMsV0FBVztRQUM1QixPQUFPRDtJQUNYO0lBQ0EsTUFBTUUsWUFBWSxJQUFJRCxVQUFVO1FBQzVCRSxNQUFNO1FBQ05IO0lBQ0o7SUFDQSwyQkFBMkI7SUFDM0IsSUFBSUEsaUJBQWlCSSxTQUFTSixNQUFNSyxLQUFLLEVBQUU7UUFDdkNILFVBQVVHLEtBQUssR0FBR0wsTUFBTUssS0FBSztJQUNqQztJQUNBLE9BQU9IO0FBQ1g7QUFDQSxNQUFNSSwwQkFBMEJGO0FBQ2hDO0FBQ0EsU0FBU0csb0JBQW9CUCxLQUFLO0lBQzlCLElBQUlBLGlCQUFpQkksT0FBTztRQUN4QixPQUFPSjtJQUNYO0lBQ0EsTUFBTVEsT0FBTyxPQUFPUjtJQUNwQixJQUFJUSxTQUFTLGVBQWVBLFNBQVMsY0FBY1IsVUFBVSxNQUFNO1FBQy9ELE9BQU9TO0lBQ1g7SUFDQSwrQ0FBK0M7SUFDL0MsSUFBSUQsU0FBUyxVQUFVO1FBQ25CLE9BQU8sSUFBSUosTUFBTU0sT0FBT1Y7SUFDNUI7SUFDQSxvREFBb0Q7SUFDcEQsSUFBSUwsU0FBU0ssUUFBUTtRQUNqQixNQUFNVyxNQUFNLElBQUlMO1FBQ2hCLElBQUksTUFBTU0sT0FBT1osTUFBTTtZQUNuQlcsR0FBRyxDQUFDQyxJQUFJLEdBQUdaLEtBQUssQ0FBQ1ksSUFBSTtRQUN6QjtRQUNBLE9BQU9EO0lBQ1g7SUFDQSxPQUFPRjtBQUNYO0FBQ0EsTUFBTVIsa0JBQWtCRztJQUNwQlMsWUFBWUMsSUFBSSxDQUFDO1FBQ2IsTUFBTWQsUUFBUU8sb0JBQW9CTyxLQUFLZCxLQUFLO1FBQzVDLE1BQU1lLFVBQVVELEtBQUtDLE9BQU8sSUFBSWYsT0FBT2UsV0FBV0QsS0FBS1gsSUFBSTtRQUMzRCw2REFBNkQ7UUFDN0QsMERBQTBEO1FBQzFELEtBQUssQ0FBQ1ksU0FBUztZQUNYZjtRQUNKO1FBQ0EsSUFBSSxDQUFDRyxJQUFJLEdBQUdXLEtBQUtYLElBQUk7UUFDckIsSUFBSSxDQUFDYSxJQUFJLEdBQUcsSUFBSSxDQUFDSCxXQUFXLENBQUNHLElBQUk7SUFDckM7QUFDSjtBQUV3RCIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvVFJQQ0Vycm9yLTZhMTY1M2E0Lm1qcz8wMjBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAvLyBjaGVjayB0aGF0IHZhbHVlIGlzIG9iamVjdFxuICAgIHJldHVybiAhIXZhbHVlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xufVxuXG5mdW5jdGlvbiBnZXRUUlBDRXJyb3JGcm9tVW5rbm93bihjYXVzZSkge1xuICAgIGlmIChjYXVzZSBpbnN0YW5jZW9mIFRSUENFcnJvcikge1xuICAgICAgICByZXR1cm4gY2F1c2U7XG4gICAgfVxuICAgIGNvbnN0IHRycGNFcnJvciA9IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgY2F1c2VcbiAgICB9KTtcbiAgICAvLyBJbmhlcml0IHN0YWNrIGZyb20gZXJyb3JcbiAgICBpZiAoY2F1c2UgaW5zdGFuY2VvZiBFcnJvciAmJiBjYXVzZS5zdGFjaykge1xuICAgICAgICB0cnBjRXJyb3Iuc3RhY2sgPSBjYXVzZS5zdGFjaztcbiAgICB9XG4gICAgcmV0dXJuIHRycGNFcnJvcjtcbn1cbmNsYXNzIFVua25vd25DYXVzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuZnVuY3Rpb24gZ2V0Q2F1c2VGcm9tVW5rbm93bihjYXVzZSkge1xuICAgIGlmIChjYXVzZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHJldHVybiBjYXVzZTtcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBjYXVzZTtcbiAgICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCBjYXVzZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBQcmltaXRpdmUgdHlwZXMganVzdCBnZXQgd3JhcHBlZCBpbiBhbiBlcnJvclxuICAgIGlmICh0eXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFN0cmluZyhjYXVzZSkpO1xuICAgIH1cbiAgICAvLyBJZiBpdCdzIGFuIG9iamVjdCwgd2UnbGwgY3JlYXRlIGEgc3ludGhldGljIGVycm9yXG4gICAgaWYgKGlzT2JqZWN0KGNhdXNlKSkge1xuICAgICAgICBjb25zdCBlcnIgPSBuZXcgVW5rbm93bkNhdXNlRXJyb3IoKTtcbiAgICAgICAgZm9yKGNvbnN0IGtleSBpbiBjYXVzZSl7XG4gICAgICAgICAgICBlcnJba2V5XSA9IGNhdXNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmNsYXNzIFRSUENFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKXtcbiAgICAgICAgY29uc3QgY2F1c2UgPSBnZXRDYXVzZUZyb21Vbmtub3duKG9wdHMuY2F1c2UpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gb3B0cy5tZXNzYWdlID8/IGNhdXNlPy5tZXNzYWdlID8/IG9wdHMuY29kZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWVycm9yLWNhdXNlXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHtcbiAgICAgICAgICAgIGNhdXNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNvZGUgPSBvcHRzLmNvZGU7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRSUENFcnJvciBhcyBULCBnZXRUUlBDRXJyb3JGcm9tVW5rbm93biBhcyBnIH07XG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImdldFRSUENFcnJvckZyb21Vbmtub3duIiwiY2F1c2UiLCJUUlBDRXJyb3IiLCJ0cnBjRXJyb3IiLCJjb2RlIiwiRXJyb3IiLCJzdGFjayIsIlVua25vd25DYXVzZUVycm9yIiwiZ2V0Q2F1c2VGcm9tVW5rbm93biIsInR5cGUiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJlcnIiLCJrZXkiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJtZXNzYWdlIiwibmFtZSIsIlQiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/TRPCError-6a1653a4.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/adapters/fetch/index.mjs":
/*!*********************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/adapters/fetch/index.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchRequestHandler: () => (/* binding */ fetchRequestHandler)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _resolveHTTPResponse_67085326_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../resolveHTTPResponse-67085326.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/resolveHTTPResponse-67085326.mjs\");\n/* harmony import */ var _batchStreamFormatter_fc1ffb26_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../batchStreamFormatter-fc1ffb26.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n/* harmony import */ var _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../config-cd32070b.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/config-cd32070b.mjs\");\n/* harmony import */ var _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../TRPCError-6a1653a4.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-6a1653a4.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../transformTRPCResponse-1153b421.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _contentType_53e30af8_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../contentType-53e30af8.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/contentType-53e30af8.mjs\");\n\n\n\n\n\n\n\n\nasync function fetchRequestHandler(opts) {\n    const resHeaders = new Headers();\n    const createContext = async ()=>{\n        return opts.createContext?.({\n            req: opts.req,\n            resHeaders\n        });\n    };\n    const url = new URL(opts.req.url);\n    const path = url.pathname.slice(opts.endpoint.length + 1);\n    const req = {\n        query: url.searchParams,\n        method: opts.req.method,\n        headers: Object.fromEntries(opts.req.headers),\n        body: opts.req.headers.get(\"content-type\")?.startsWith(\"application/json\") ? await opts.req.text() : \"\"\n    };\n    let resolve;\n    const promise = new Promise((r)=>resolve = r);\n    let status = 200;\n    let isStream = false;\n    let controller;\n    let encoder;\n    let formatter;\n    const unstable_onHead = (head, isStreaming)=>{\n        for (const [key, value] of Object.entries(head.headers ?? {})){\n            /* istanbul ignore if -- @preserve */ if (typeof value === \"undefined\") {\n                continue;\n            }\n            if (typeof value === \"string\") {\n                resHeaders.set(key, value);\n                continue;\n            }\n            for (const v of value){\n                resHeaders.append(key, v);\n            }\n        }\n        status = head.status;\n        if (isStreaming) {\n            resHeaders.set(\"Transfer-Encoding\", \"chunked\");\n            resHeaders.append(\"Vary\", \"trpc-batch-mode\");\n            const stream = new ReadableStream({\n                start (c) {\n                    controller = c;\n                }\n            });\n            const response = new Response(stream, {\n                status,\n                headers: resHeaders\n            });\n            resolve(response);\n            encoder = new TextEncoder();\n            formatter = (0,_batchStreamFormatter_fc1ffb26_mjs__WEBPACK_IMPORTED_MODULE_2__.g)();\n            isStream = true;\n        }\n    };\n    const unstable_onChunk = ([index, string])=>{\n        if (index === -1) {\n            // full response, no streaming\n            const response = new Response(string || null, {\n                status,\n                headers: resHeaders\n            });\n            resolve(response);\n        } else {\n            controller.enqueue(encoder.encode(formatter(index, string)));\n        }\n    };\n    (0,_resolveHTTPResponse_67085326_mjs__WEBPACK_IMPORTED_MODULE_1__.r)({\n        req,\n        createContext,\n        path,\n        router: opts.router,\n        batching: opts.batching,\n        responseMeta: opts.responseMeta,\n        onError (o) {\n            opts?.onError?.({\n                ...o,\n                req: opts.req\n            });\n        },\n        unstable_onHead,\n        unstable_onChunk\n    }).then(()=>{\n        if (isStream) {\n            controller.enqueue(encoder.encode(formatter.end()));\n            controller.close();\n        }\n    }).catch(()=>{\n        if (isStream) {\n            controller.close();\n        }\n    });\n    return promise;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/adapters/fetch/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs":
/*!******************************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getBatchStreamFormatter)\n/* harmony export */ });\n/**\n * Format a batch response as a line-delimited JSON stream\n * that the `unstable_httpBatchStreamLink` can parse:\n *\n * @example\n * ```ts\n * const formatter = getBatchStreamFormatter();\n * res.send(formatter(1, 'response #2'));\n * res.send(formatter(0, 'response #1'));\n * res.send(formatter.end());\n * ```\n *\n * Expected format:\n * ```json\n * {\"1\":\"response #2\"\n * ,\"0\":\"response #1\"\n * }\n * ```\n */ function getBatchStreamFormatter() {\n    let first = true;\n    function format(index, string) {\n        const prefix = first ? \"{\" : \",\";\n        first = false;\n        return `${prefix}\"${index}\":${string}\\n`;\n    }\n    format.end = ()=>\"}\";\n    return format;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2JhdGNoU3RyZWFtRm9ybWF0dGVyLWZjMWZmYjI2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCQyxHQUFHLFNBQVNBO0lBQ1QsSUFBSUMsUUFBUTtJQUNaLFNBQVNDLE9BQU9DLEtBQUssRUFBRUMsTUFBTTtRQUN6QixNQUFNQyxTQUFTSixRQUFRLE1BQU07UUFDN0JBLFFBQVE7UUFDUixPQUFPLENBQUMsRUFBRUksT0FBTyxDQUFDLEVBQUVGLE1BQU0sRUFBRSxFQUFFQyxPQUFPLEVBQUUsQ0FBQztJQUM1QztJQUNBRixPQUFPSSxHQUFHLEdBQUcsSUFBSTtJQUNqQixPQUFPSjtBQUNYO0FBRXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9iYXRjaFN0cmVhbUZvcm1hdHRlci1mYzFmZmIyNi5tanM/MDAyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZvcm1hdCBhIGJhdGNoIHJlc3BvbnNlIGFzIGEgbGluZS1kZWxpbWl0ZWQgSlNPTiBzdHJlYW1cbiAqIHRoYXQgdGhlIGB1bnN0YWJsZV9odHRwQmF0Y2hTdHJlYW1MaW5rYCBjYW4gcGFyc2U6XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBmb3JtYXR0ZXIgPSBnZXRCYXRjaFN0cmVhbUZvcm1hdHRlcigpO1xuICogcmVzLnNlbmQoZm9ybWF0dGVyKDEsICdyZXNwb25zZSAjMicpKTtcbiAqIHJlcy5zZW5kKGZvcm1hdHRlcigwLCAncmVzcG9uc2UgIzEnKSk7XG4gKiByZXMuc2VuZChmb3JtYXR0ZXIuZW5kKCkpO1xuICogYGBgXG4gKlxuICogRXhwZWN0ZWQgZm9ybWF0OlxuICogYGBganNvblxuICoge1wiMVwiOlwicmVzcG9uc2UgIzJcIlxuICogLFwiMFwiOlwicmVzcG9uc2UgIzFcIlxuICogfVxuICogYGBgXG4gKi8gZnVuY3Rpb24gZ2V0QmF0Y2hTdHJlYW1Gb3JtYXR0ZXIoKSB7XG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICBmdW5jdGlvbiBmb3JtYXQoaW5kZXgsIHN0cmluZykge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBmaXJzdCA/ICd7JyA6ICcsJztcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH1cIiR7aW5kZXh9XCI6JHtzdHJpbmd9XFxuYDtcbiAgICB9XG4gICAgZm9ybWF0LmVuZCA9ICgpPT4nfSc7XG4gICAgcmV0dXJuIGZvcm1hdDtcbn1cblxuZXhwb3J0IHsgZ2V0QmF0Y2hTdHJlYW1Gb3JtYXR0ZXIgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImdldEJhdGNoU3RyZWFtRm9ybWF0dGVyIiwiZmlyc3QiLCJmb3JtYXQiLCJpbmRleCIsInN0cmluZyIsInByZWZpeCIsImVuZCIsImciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/codes-c924c3db.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   a: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   i: () => (/* binding */ invert)\n/* harmony export */ });\n/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2NvZGVzLWM5MjRjM2RiLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Q0FFQyxHQUFHLFNBQVNBLE9BQU9DLEdBQUc7SUFDbkIsTUFBTUMsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzdCLElBQUksTUFBTUMsT0FBT0osSUFBSTtRQUNqQixNQUFNSyxJQUFJTCxHQUFHLENBQUNJLElBQUk7UUFDbEJILE1BQU0sQ0FBQ0ksRUFBRSxHQUFHRDtJQUNoQjtJQUNBLE9BQU9IO0FBQ1g7QUFFQSxtREFBbUQ7QUFDbkQ7Ozs7O0NBS0MsR0FBRyxNQUFNSywwQkFBMEI7SUFDaEM7OztHQUdELEdBQUdDLGFBQWEsQ0FBQztJQUNoQjs7R0FFRCxHQUFHQyxhQUFhLENBQUM7SUFDaEIsMEJBQTBCO0lBQzFCQyx1QkFBdUIsQ0FBQztJQUN4QkMsaUJBQWlCLENBQUM7SUFDbEIsaUNBQWlDO0lBQ2pDQyxjQUFjLENBQUM7SUFDZkMsV0FBVyxDQUFDO0lBQ1pDLFdBQVcsQ0FBQztJQUNaQyxzQkFBc0IsQ0FBQztJQUN2QkMsU0FBUyxDQUFDO0lBQ1ZDLFVBQVUsQ0FBQztJQUNYQyxxQkFBcUIsQ0FBQztJQUN0QkMsbUJBQW1CLENBQUM7SUFDcEJDLHVCQUF1QixDQUFDO0lBQ3hCQyxtQkFBbUIsQ0FBQztJQUNwQkMsdUJBQXVCLENBQUM7QUFDNUI7QUFDQSxNQUFNQyw2QkFBNkJ2QixPQUFPTztBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29kZXMtYzkyNGMzZGIubWpzPzBhY2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBpbnZlcnQob2JqKSB7XG4gICAgY29uc3QgbmV3T2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IoY29uc3Qga2V5IGluIG9iail7XG4gICAgICAgIGNvbnN0IHYgPSBvYmpba2V5XTtcbiAgICAgICAgbmV3T2JqW3ZdID0ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xufVxuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vd3d3Lmpzb25ycGMub3JnL3NwZWNpZmljYXRpb25cbi8qKlxuICogSlNPTi1SUEMgMi4wIEVycm9yIGNvZGVzXG4gKlxuICogYC0zMjAwMGAgdG8gYC0zMjA5OWAgYXJlIHJlc2VydmVkIGZvciBpbXBsZW1lbnRhdGlvbi1kZWZpbmVkIHNlcnZlci1lcnJvcnMuXG4gKiBGb3IgdFJQQyB3ZSdyZSBjb3B5aW5nIHRoZSBsYXN0IGRpZ2l0cyBvZiBIVFRQIDRYWCBlcnJvcnMuXG4gKi8gY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgPSB7XG4gICAgLyoqXG4gICAqIEludmFsaWQgSlNPTiB3YXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAgICogQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXG4gICAqLyBQQVJTRV9FUlJPUjogLTMyNzAwLFxuICAgIC8qKlxuICAgKiBUaGUgSlNPTiBzZW50IGlzIG5vdCBhIHZhbGlkIFJlcXVlc3Qgb2JqZWN0LlxuICAgKi8gQkFEX1JFUVVFU1Q6IC0zMjYwMCxcbiAgICAvLyBJbnRlcm5hbCBKU09OLVJQQyBlcnJvclxuICAgIElOVEVSTkFMX1NFUlZFUl9FUlJPUjogLTMyNjAzLFxuICAgIE5PVF9JTVBMRU1FTlRFRDogLTMyNjAzLFxuICAgIC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljIGVycm9yc1xuICAgIFVOQVVUSE9SSVpFRDogLTMyMDAxLFxuICAgIEZPUkJJRERFTjogLTMyMDAzLFxuICAgIE5PVF9GT1VORDogLTMyMDA0LFxuICAgIE1FVEhPRF9OT1RfU1VQUE9SVEVEOiAtMzIwMDUsXG4gICAgVElNRU9VVDogLTMyMDA4LFxuICAgIENPTkZMSUNUOiAtMzIwMDksXG4gICAgUFJFQ09ORElUSU9OX0ZBSUxFRDogLTMyMDEyLFxuICAgIFBBWUxPQURfVE9PX0xBUkdFOiAtMzIwMTMsXG4gICAgVU5QUk9DRVNTQUJMRV9DT05URU5UOiAtMzIwMjIsXG4gICAgVE9PX01BTllfUkVRVUVTVFM6IC0zMjAyOSxcbiAgICBDTElFTlRfQ0xPU0VEX1JFUVVFU1Q6IC0zMjA5OVxufTtcbmNvbnN0IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSID0gaW52ZXJ0KFRSUENfRVJST1JfQ09ERVNfQllfS0VZKTtcblxuZXhwb3J0IHsgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgYXMgVCwgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgYXMgYSwgaW52ZXJ0IGFzIGkgfTtcbiJdLCJuYW1lcyI6WyJpbnZlcnQiLCJvYmoiLCJuZXdPYmoiLCJPYmplY3QiLCJjcmVhdGUiLCJrZXkiLCJ2IiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJQQVJTRV9FUlJPUiIsIkJBRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiVU5BVVRIT1JJWkVEIiwiRk9SQklEREVOIiwiTk9UX0ZPVU5EIiwiTUVUSE9EX05PVF9TVVBQT1JURUQiLCJUSU1FT1VUIiwiQ09ORkxJQ1QiLCJQUkVDT05ESVRJT05fRkFJTEVEIiwiUEFZTE9BRF9UT09fTEFSR0UiLCJVTlBST0NFU1NBQkxFX0NPTlRFTlQiLCJUT09fTUFOWV9SRVFVRVNUUyIsIkNMSUVOVF9DTE9TRURfUkVRVUVTVCIsIlRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIiwiVCIsImEiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/config-cd32070b.mjs":
/*!****************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/config-cd32070b.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ defaultTransformer),\n/* harmony export */   b: () => (/* binding */ callProcedure),\n/* harmony export */   c: () => (/* binding */ createRouterFactory),\n/* harmony export */   d: () => (/* binding */ defaultFormatter),\n/* harmony export */   g: () => (/* binding */ getDataTransformer),\n/* harmony export */   i: () => (/* binding */ isServerDefault),\n/* harmony export */   p: () => (/* binding */ procedureTypes)\n/* harmony export */ });\n/* harmony import */ var _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCError-6a1653a4.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-6a1653a4.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n/**\n * @public\n */ /**\n * @internal\n */ function getDataTransformer(transformer) {\n    if (\"input\" in transformer) {\n        return transformer;\n    }\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\n/**\n * @internal\n */ const defaultTransformer = {\n    _default: true,\n    input: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    },\n    output: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    }\n};\nconst defaultFormatter = ({ shape })=>{\n    return shape;\n};\n/**\n * Create an object without inheriting anything from `Object.prototype`\n * @internal\n */ function omitPrototype(obj) {\n    return Object.assign(Object.create(null), obj);\n}\nconst procedureTypes = [\n    \"query\",\n    \"mutation\",\n    \"subscription\"\n];\nfunction isRouter(procedureOrRouter) {\n    return \"router\" in procedureOrRouter._def;\n}\nconst emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: defaultFormatter,\n    transformer: defaultTransformer\n};\n/**\n * Reserved words that can't be used as router or procedure names\n */ const reservedWords = [\n    /**\n   * Then is a reserved word because otherwise we can't return a promise that returns a Proxy\n   * since JS will think that `.then` is something that exists\n   */ \"then\"\n];\n/**\n * @internal\n */ function createRouterFactory(config) {\n    return function createRouterInner(procedures) {\n        const reservedWordsUsed = new Set(Object.keys(procedures).filter((v)=>reservedWords.includes(v)));\n        if (reservedWordsUsed.size > 0) {\n            throw new Error(\"Reserved words used in `router({})` call: \" + Array.from(reservedWordsUsed).join(\", \"));\n        }\n        const routerProcedures = omitPrototype({});\n        function recursiveGetPaths(procedures, path = \"\") {\n            for (const [key, procedureOrRouter] of Object.entries(procedures ?? {})){\n                const newPath = `${path}${key}`;\n                if (isRouter(procedureOrRouter)) {\n                    recursiveGetPaths(procedureOrRouter._def.procedures, `${newPath}.`);\n                    continue;\n                }\n                if (routerProcedures[newPath]) {\n                    throw new Error(`Duplicate key: ${newPath}`);\n                }\n                routerProcedures[newPath] = procedureOrRouter;\n            }\n        }\n        recursiveGetPaths(procedures);\n        const _def = {\n            _config: config,\n            router: true,\n            procedures: routerProcedures,\n            ...emptyRouter,\n            record: procedures,\n            queries: Object.entries(routerProcedures).filter((pair)=>pair[1]._def.query).reduce((acc, [key, val])=>({\n                    ...acc,\n                    [key]: val\n                }), {}),\n            mutations: Object.entries(routerProcedures).filter((pair)=>pair[1]._def.mutation).reduce((acc, [key, val])=>({\n                    ...acc,\n                    [key]: val\n                }), {}),\n            subscriptions: Object.entries(routerProcedures).filter((pair)=>pair[1]._def.subscription).reduce((acc, [key, val])=>({\n                    ...acc,\n                    [key]: val\n                }), {})\n        };\n        const router = {\n            ...procedures,\n            _def,\n            createCaller (ctx) {\n                const proxy = (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(({ path, args })=>{\n                    // interop mode\n                    if (path.length === 1 && procedureTypes.includes(path[0])) {\n                        return callProcedure({\n                            procedures: _def.procedures,\n                            path: args[0],\n                            rawInput: args[1],\n                            ctx,\n                            type: path[0]\n                        });\n                    }\n                    const fullPath = path.join(\".\");\n                    const procedure = _def.procedures[fullPath];\n                    let type = \"query\";\n                    if (procedure._def.mutation) {\n                        type = \"mutation\";\n                    } else if (procedure._def.subscription) {\n                        type = \"subscription\";\n                    }\n                    return procedure({\n                        path: fullPath,\n                        rawInput: args[0],\n                        ctx,\n                        type\n                    });\n                });\n                return proxy;\n            },\n            getErrorShape (opts) {\n                const { path, error } = opts;\n                const { code } = opts.error;\n                const shape = {\n                    message: error.message,\n                    code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__.T[code],\n                    data: {\n                        code,\n                        httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(error)\n                    }\n                };\n                if (config.isDev && typeof opts.error.stack === \"string\") {\n                    shape.data.stack = opts.error.stack;\n                }\n                if (typeof path === \"string\") {\n                    shape.data.path = path;\n                }\n                return this._def._config.errorFormatter({\n                    ...opts,\n                    shape\n                });\n            }\n        };\n        return router;\n    };\n}\n/**\n * @internal\n */ function callProcedure(opts) {\n    const { type, path } = opts;\n    if (!(path in opts.procedures) || !opts.procedures[path]?._def[type]) {\n        throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"NOT_FOUND\",\n            message: `No \"${type}\"-procedure on path \"${path}\"`\n        });\n    }\n    const procedure = opts.procedures[path];\n    return procedure(opts);\n}\n/**\n * The default check to see if we're in a server\n */ const isServerDefault =  true || 0;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/config-cd32070b.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/contentType-53e30af8.mjs":
/*!*********************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/contentType-53e30af8.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getJsonContentTypeInputs)\n/* harmony export */ });\n/* harmony import */ var _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCError-6a1653a4.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-6a1653a4.mjs\");\n\nfunction getRawProcedureInputOrThrow(opts) {\n    const { req } = opts;\n    try {\n        if (req.method === \"GET\") {\n            if (!req.query.has(\"input\")) {\n                return undefined;\n            }\n            const raw = req.query.get(\"input\");\n            return JSON.parse(raw);\n        }\n        if (!opts.preprocessedBody && typeof req.body === \"string\") {\n            // A mutation with no inputs will have req.body === ''\n            return req.body.length === 0 ? undefined : JSON.parse(req.body);\n        }\n        return req.body;\n    } catch (cause) {\n        throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"PARSE_ERROR\",\n            cause\n        });\n    }\n}\nconst deserializeInputValue = (rawValue, transformer)=>{\n    return typeof rawValue !== \"undefined\" ? transformer.input.deserialize(rawValue) : rawValue;\n};\nconst getJsonContentTypeInputs = (opts)=>{\n    const rawInput = getRawProcedureInputOrThrow(opts);\n    const transformer = opts.router._def._config.transformer;\n    if (!opts.isBatchCall) {\n        return {\n            0: deserializeInputValue(rawInput, transformer)\n        };\n    }\n    /* istanbul ignore if  */ if (rawInput == null || typeof rawInput !== \"object\" || Array.isArray(rawInput)) {\n        throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"BAD_REQUEST\",\n            message: '\"input\" needs to be an object when doing a batch call'\n        });\n    }\n    const input = {};\n    for(const key in rawInput){\n        const k = key;\n        const rawValue = rawInput[k];\n        const value = deserializeInputValue(rawValue, transformer);\n        input[k] = value;\n    }\n    return input;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2NvbnRlbnRUeXBlLTUzZTMwYWY4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwRDtBQUUxRCxTQUFTRSw0QkFBNEJDLElBQUk7SUFDckMsTUFBTSxFQUFFQyxHQUFHLEVBQUcsR0FBR0Q7SUFDakIsSUFBSTtRQUNBLElBQUlDLElBQUlDLE1BQU0sS0FBSyxPQUFPO1lBQ3RCLElBQUksQ0FBQ0QsSUFBSUUsS0FBSyxDQUFDQyxHQUFHLENBQUMsVUFBVTtnQkFDekIsT0FBT0M7WUFDWDtZQUNBLE1BQU1DLE1BQU1MLElBQUlFLEtBQUssQ0FBQ0ksR0FBRyxDQUFDO1lBQzFCLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0g7UUFDdEI7UUFDQSxJQUFJLENBQUNOLEtBQUtVLGdCQUFnQixJQUFJLE9BQU9ULElBQUlVLElBQUksS0FBSyxVQUFVO1lBQ3hELHNEQUFzRDtZQUN0RCxPQUFPVixJQUFJVSxJQUFJLENBQUNDLE1BQU0sS0FBSyxJQUFJUCxZQUFZRyxLQUFLQyxLQUFLLENBQUNSLElBQUlVLElBQUk7UUFDbEU7UUFDQSxPQUFPVixJQUFJVSxJQUFJO0lBQ25CLEVBQUUsT0FBT0UsT0FBTztRQUNaLE1BQU0sSUFBSWYsc0RBQVNBLENBQUM7WUFDaEJnQixNQUFNO1lBQ05EO1FBQ0o7SUFDSjtBQUNKO0FBQ0EsTUFBTUUsd0JBQXdCLENBQUNDLFVBQVVDO0lBQ3JDLE9BQU8sT0FBT0QsYUFBYSxjQUFjQyxZQUFZQyxLQUFLLENBQUNDLFdBQVcsQ0FBQ0gsWUFBWUE7QUFDdkY7QUFDQSxNQUFNSSwyQkFBMkIsQ0FBQ3BCO0lBQzlCLE1BQU1xQixXQUFXdEIsNEJBQTRCQztJQUM3QyxNQUFNaUIsY0FBY2pCLEtBQUtzQixNQUFNLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDUCxXQUFXO0lBQ3hELElBQUksQ0FBQ2pCLEtBQUt5QixXQUFXLEVBQUU7UUFDbkIsT0FBTztZQUNILEdBQUdWLHNCQUFzQk0sVUFBVUo7UUFDdkM7SUFDSjtJQUNBLHVCQUF1QixHQUFHLElBQUlJLFlBQVksUUFBUSxPQUFPQSxhQUFhLFlBQVlLLE1BQU1DLE9BQU8sQ0FBQ04sV0FBVztRQUN2RyxNQUFNLElBQUl2QixzREFBU0EsQ0FBQztZQUNoQmdCLE1BQU07WUFDTmMsU0FBUztRQUNiO0lBQ0o7SUFDQSxNQUFNVixRQUFRLENBQUM7SUFDZixJQUFJLE1BQU1XLE9BQU9SLFNBQVM7UUFDdEIsTUFBTVMsSUFBSUQ7UUFDVixNQUFNYixXQUFXSyxRQUFRLENBQUNTLEVBQUU7UUFDNUIsTUFBTUMsUUFBUWhCLHNCQUFzQkMsVUFBVUM7UUFDOUNDLEtBQUssQ0FBQ1ksRUFBRSxHQUFHQztJQUNmO0lBQ0EsT0FBT2I7QUFDWDtBQUV5QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29udGVudFR5cGUtNTNlMzBhZjgubWpzPzQyZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVCBhcyBUUlBDRXJyb3IgfSBmcm9tICcuL1RSUENFcnJvci02YTE2NTNhNC5tanMnO1xuXG5mdW5jdGlvbiBnZXRSYXdQcm9jZWR1cmVJbnB1dE9yVGhyb3cob3B0cykge1xuICAgIGNvbnN0IHsgcmVxICB9ID0gb3B0cztcbiAgICB0cnkge1xuICAgICAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgICAgIGlmICghcmVxLnF1ZXJ5LmhhcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByYXcgPSByZXEucXVlcnkuZ2V0KCdpbnB1dCcpO1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmF3KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdHMucHJlcHJvY2Vzc2VkQm9keSAmJiB0eXBlb2YgcmVxLmJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBBIG11dGF0aW9uIHdpdGggbm8gaW5wdXRzIHdpbGwgaGF2ZSByZXEuYm9keSA9PT0gJydcbiAgICAgICAgICAgIHJldHVybiByZXEuYm9keS5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBKU09OLnBhcnNlKHJlcS5ib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxLmJvZHk7XG4gICAgfSBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgICBjb2RlOiAnUEFSU0VfRVJST1InLFxuICAgICAgICAgICAgY2F1c2VcbiAgICAgICAgfSk7XG4gICAgfVxufVxuY29uc3QgZGVzZXJpYWxpemVJbnB1dFZhbHVlID0gKHJhd1ZhbHVlLCB0cmFuc2Zvcm1lcik9PntcbiAgICByZXR1cm4gdHlwZW9mIHJhd1ZhbHVlICE9PSAndW5kZWZpbmVkJyA/IHRyYW5zZm9ybWVyLmlucHV0LmRlc2VyaWFsaXplKHJhd1ZhbHVlKSA6IHJhd1ZhbHVlO1xufTtcbmNvbnN0IGdldEpzb25Db250ZW50VHlwZUlucHV0cyA9IChvcHRzKT0+e1xuICAgIGNvbnN0IHJhd0lucHV0ID0gZ2V0UmF3UHJvY2VkdXJlSW5wdXRPclRocm93KG9wdHMpO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gb3B0cy5yb3V0ZXIuX2RlZi5fY29uZmlnLnRyYW5zZm9ybWVyO1xuICAgIGlmICghb3B0cy5pc0JhdGNoQ2FsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgMDogZGVzZXJpYWxpemVJbnB1dFZhbHVlKHJhd0lucHV0LCB0cmFuc2Zvcm1lcilcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqLyBpZiAocmF3SW5wdXQgPT0gbnVsbCB8fCB0eXBlb2YgcmF3SW5wdXQgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkocmF3SW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogJ0JBRF9SRVFVRVNUJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdcImlucHV0XCIgbmVlZHMgdG8gYmUgYW4gb2JqZWN0IHdoZW4gZG9pbmcgYSBiYXRjaCBjYWxsJ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXQgPSB7fTtcbiAgICBmb3IoY29uc3Qga2V5IGluIHJhd0lucHV0KXtcbiAgICAgICAgY29uc3QgayA9IGtleTtcbiAgICAgICAgY29uc3QgcmF3VmFsdWUgPSByYXdJbnB1dFtrXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBkZXNlcmlhbGl6ZUlucHV0VmFsdWUocmF3VmFsdWUsIHRyYW5zZm9ybWVyKTtcbiAgICAgICAgaW5wdXRba10gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufTtcblxuZXhwb3J0IHsgZ2V0SnNvbkNvbnRlbnRUeXBlSW5wdXRzIGFzIGcgfTtcbiJdLCJuYW1lcyI6WyJUIiwiVFJQQ0Vycm9yIiwiZ2V0UmF3UHJvY2VkdXJlSW5wdXRPclRocm93Iiwib3B0cyIsInJlcSIsIm1ldGhvZCIsInF1ZXJ5IiwiaGFzIiwidW5kZWZpbmVkIiwicmF3IiwiZ2V0IiwiSlNPTiIsInBhcnNlIiwicHJlcHJvY2Vzc2VkQm9keSIsImJvZHkiLCJsZW5ndGgiLCJjYXVzZSIsImNvZGUiLCJkZXNlcmlhbGl6ZUlucHV0VmFsdWUiLCJyYXdWYWx1ZSIsInRyYW5zZm9ybWVyIiwiaW5wdXQiLCJkZXNlcmlhbGl6ZSIsImdldEpzb25Db250ZW50VHlwZUlucHV0cyIsInJhd0lucHV0Iiwicm91dGVyIiwiX2RlZiIsIl9jb25maWciLCJpc0JhdGNoQ2FsbCIsIkFycmF5IiwiaXNBcnJheSIsIm1lc3NhZ2UiLCJrZXkiLCJrIiwidmFsdWUiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/contentType-53e30af8.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/index-f91d720c.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   a: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   b: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   c: () => (/* binding */ createFlatProxy),\n/* harmony export */   g: () => (/* binding */ getHTTPStatusCodeFromError)\n/* harmony export */ });\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\nconst TRPC_ERROR_CODES_BY_NUMBER = (0,_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === \"number\") {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === \"apply\";\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== \"string\" || name === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2luZGV4LWY5MWQ3MjBjLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUY7QUFFakYsTUFBTUksNkJBQTZCSCxzREFBTUEsQ0FBQ0Usa0RBQXVCQTtBQUNqRSxNQUFNRSx3QkFBd0I7SUFDMUJDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxzQkFBc0I7SUFDdEJDLFNBQVM7SUFDVEMsVUFBVTtJQUNWQyxxQkFBcUI7SUFDckJDLG1CQUFtQjtJQUNuQkMsdUJBQXVCO0lBQ3ZCQyxtQkFBbUI7SUFDbkJDLHVCQUF1QjtJQUN2QkMsdUJBQXVCO0lBQ3ZCQyxpQkFBaUI7QUFDckI7QUFDQSxTQUFTQyxxQkFBcUJDLElBQUk7SUFDOUIsT0FBT2pCLHFCQUFxQixDQUFDaUIsS0FBSyxJQUFJO0FBQzFDO0FBQ0EsU0FBU0Msa0JBQWtCQyxJQUFJO0lBQzNCLE1BQU1DLE1BQU1DLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUUEsT0FBTztRQUNyQ0E7S0FDSDtJQUNELE1BQU1JLGVBQWUsSUFBSUMsSUFBSUosSUFBSUssR0FBRyxDQUFDLENBQUNDO1FBQ2xDLElBQUksV0FBV0EsS0FBSztZQUNoQixNQUFNQyxPQUFPRCxJQUFJRSxLQUFLLENBQUNELElBQUk7WUFDM0IsSUFBSSxPQUFPQSxLQUFLRSxVQUFVLEtBQUssVUFBVTtnQkFDckMsT0FBT0YsS0FBS0UsVUFBVTtZQUMxQjtZQUNBLE1BQU1aLE9BQU9sQiwwQkFBMEIsQ0FBQzJCLElBQUlFLEtBQUssQ0FBQ1gsSUFBSSxDQUFDO1lBQ3ZELE9BQU9ELHFCQUFxQkM7UUFDaEM7UUFDQSxPQUFPO0lBQ1g7SUFDQSxJQUFJTSxhQUFhTyxJQUFJLEtBQUssR0FBRztRQUN6QixPQUFPO0lBQ1g7SUFDQSxNQUFNRCxhQUFhTixhQUFhUSxNQUFNLEdBQUdDLElBQUksR0FBR0MsS0FBSztJQUNyRCxPQUFPSjtBQUNYO0FBQ0EsU0FBU0ssMkJBQTJCTixLQUFLO0lBQ3JDLE9BQU9aLHFCQUFxQlksTUFBTVgsSUFBSTtBQUMxQztBQUVBLE1BQU1rQixPQUFPO0FBQ2IsT0FBTztBQUNQO0FBQ0EsU0FBU0MsaUJBQWlCQyxRQUFRLEVBQUVDLElBQUk7SUFDcEMsTUFBTUMsUUFBUSxJQUFJQyxNQUFNTCxNQUFNO1FBQzFCTSxLQUFLQyxJQUFJLEVBQUVDLEdBQUc7WUFDVixJQUFJLE9BQU9BLFFBQVEsWUFBWUEsUUFBUSxRQUFRO2dCQUMzQyx3REFBd0Q7Z0JBQ3hELHdEQUF3RDtnQkFDeEQsT0FBT0M7WUFDWDtZQUNBLE9BQU9SLGlCQUFpQkMsVUFBVTttQkFDM0JDO2dCQUNISzthQUNIO1FBQ0w7UUFDQUUsT0FBT0MsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLElBQUk7WUFDZixNQUFNQyxVQUFVWCxJQUFJLENBQUNBLEtBQUtZLE1BQU0sR0FBRyxFQUFFLEtBQUs7WUFDMUMsT0FBT2IsU0FBUztnQkFDWlcsTUFBTUMsVUFBVUQsS0FBS0UsTUFBTSxJQUFJLElBQUlGLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHQTtnQkFDbERWLE1BQU1XLFVBQVVYLEtBQUthLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS2I7WUFDeEM7UUFDSjtJQUNKO0lBQ0EsT0FBT0M7QUFDWDtBQUNBOzs7O0NBSUMsR0FBRyxNQUFNYSx1QkFBdUIsQ0FBQ2YsV0FBV0QsaUJBQWlCQyxVQUFVLEVBQUU7QUFDMUU7Ozs7Q0FJQyxHQUFHLE1BQU1nQixrQkFBa0IsQ0FBQ2hCO0lBQ3pCLE9BQU8sSUFBSUcsTUFBTUwsTUFBTTtRQUNuQk0sS0FBS0MsSUFBSSxFQUFFWSxJQUFJO1lBQ1gsSUFBSSxPQUFPQSxTQUFTLFlBQVlBLFNBQVMsUUFBUTtnQkFDN0Msd0RBQXdEO2dCQUN4RCx3REFBd0Q7Z0JBQ3hELE9BQU9WO1lBQ1g7WUFDQSxPQUFPUCxTQUFTaUI7UUFDcEI7SUFDSjtBQUNKO0FBRXFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9pbmRleC1mOTFkNzIwYy5tanM/YTQ5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpIGFzIGludmVydCwgVCBhcyBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSB9IGZyb20gJy4vY29kZXMtYzkyNGMzZGIubWpzJztcblxuY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgPSBpbnZlcnQoVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkpO1xuY29uc3QgSlNPTlJQQzJfVE9fSFRUUF9DT0RFID0ge1xuICAgIFBBUlNFX0VSUk9SOiA0MDAsXG4gICAgQkFEX1JFUVVFU1Q6IDQwMCxcbiAgICBVTkFVVEhPUklaRUQ6IDQwMSxcbiAgICBOT1RfRk9VTkQ6IDQwNCxcbiAgICBGT1JCSURERU46IDQwMyxcbiAgICBNRVRIT0RfTk9UX1NVUFBPUlRFRDogNDA1LFxuICAgIFRJTUVPVVQ6IDQwOCxcbiAgICBDT05GTElDVDogNDA5LFxuICAgIFBSRUNPTkRJVElPTl9GQUlMRUQ6IDQxMixcbiAgICBQQVlMT0FEX1RPT19MQVJHRTogNDEzLFxuICAgIFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogNDIyLFxuICAgIFRPT19NQU5ZX1JFUVVFU1RTOiA0MjksXG4gICAgQ0xJRU5UX0NMT1NFRF9SRVFVRVNUOiA0OTksXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAsXG4gICAgTk9UX0lNUExFTUVOVEVEOiA1MDFcbn07XG5mdW5jdGlvbiBnZXRTdGF0dXNDb2RlRnJvbUtleShjb2RlKSB7XG4gICAgcmV0dXJuIEpTT05SUEMyX1RPX0hUVFBfQ09ERVtjb2RlXSA/PyA1MDA7XG59XG5mdW5jdGlvbiBnZXRIVFRQU3RhdHVzQ29kZShqc29uKSB7XG4gICAgY29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShqc29uKSA/IGpzb24gOiBbXG4gICAgICAgIGpzb25cbiAgICBdO1xuICAgIGNvbnN0IGh0dHBTdGF0dXNlcyA9IG5ldyBTZXQoYXJyLm1hcCgocmVzKT0+e1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXMuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5odHRwU3RhdHVzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmh0dHBTdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVJbcmVzLmVycm9yLmNvZGVdO1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAyMDA7XG4gICAgfSkpO1xuICAgIGlmIChodHRwU3RhdHVzZXMuc2l6ZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gMjA3O1xuICAgIH1cbiAgICBjb25zdCBodHRwU3RhdHVzID0gaHR0cFN0YXR1c2VzLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICByZXR1cm4gaHR0cFN0YXR1cztcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGVycm9yLmNvZGUpO1xufVxuXG5jb25zdCBub29wID0gKCk9Pntcbi8vIG5vb3Bcbn07XG5mdW5jdGlvbiBjcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBwYXRoKSB7XG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkobm9vcCwge1xuICAgICAgICBnZXQgKF9vYmosIGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8IGtleSA9PT0gJ3RoZW4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBpZiB0aGUgcHJveHkgaXMgYWNjaWRlbnRhbGx5IHRyZWF0ZWRcbiAgICAgICAgICAgICAgICAvLyBsaWtlIGEgUHJvbWlzZUxpa2UgKGxpa2UgaW4gYFByb21pc2UucmVzb2x2ZShwcm94eSlgKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJQcm94eShjYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIC4uLnBhdGgsXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHkgKF8xLCBfMiwgYXJncykge1xuICAgICAgICAgICAgY29uc3QgaXNBcHBseSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXSA9PT0gJ2FwcGx5JztcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgYXJnczogaXNBcHBseSA/IGFyZ3MubGVuZ3RoID49IDIgPyBhcmdzWzFdIDogW10gOiBhcmdzLFxuICAgICAgICAgICAgICAgIHBhdGg6IGlzQXBwbHkgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcHJveHkgdGhhdCBjYWxscyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcGF0aCBhbmQgYXJndW1lbnRzXG4gKlxuICogQGludGVybmFsXG4gKi8gY29uc3QgY3JlYXRlUmVjdXJzaXZlUHJveHkgPSAoY2FsbGJhY2spPT5jcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBbXSk7XG4vKipcbiAqIFVzZWQgaW4gcGxhY2Ugb2YgYG5ldyBQcm94eWAgd2hlcmUgZWFjaCBoYW5kbGVyIHdpbGwgbWFwIDEgbGV2ZWwgZGVlcCB0byBhbm90aGVyIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGNvbnN0IGNyZWF0ZUZsYXRQcm94eSA9IChjYWxsYmFjayk9PntcbiAgICByZXR1cm4gbmV3IFByb3h5KG5vb3AsIHtcbiAgICAgICAgZ2V0IChfb2JqLCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUgPT09ICd0aGVuJykge1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgaWYgdGhlIHByb3h5IGlzIGFjY2lkZW50YWxseSB0cmVhdGVkXG4gICAgICAgICAgICAgICAgLy8gbGlrZSBhIFByb21pc2VMaWtlIChsaWtlIGluIGBQcm9taXNlLnJlc29sdmUocHJveHkpYClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiBhcyBULCBjcmVhdGVSZWN1cnNpdmVQcm94eSBhcyBhLCBnZXRIVFRQU3RhdHVzQ29kZSBhcyBiLCBjcmVhdGVGbGF0UHJveHkgYXMgYywgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImkiLCJpbnZlcnQiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiIsIkpTT05SUEMyX1RPX0hUVFBfQ09ERSIsIlBBUlNFX0VSUk9SIiwiQkFEX1JFUVVFU1QiLCJVTkFVVEhPUklaRUQiLCJOT1RfRk9VTkQiLCJGT1JCSURERU4iLCJNRVRIT0RfTk9UX1NVUFBPUlRFRCIsIlRJTUVPVVQiLCJDT05GTElDVCIsIlBSRUNPTkRJVElPTl9GQUlMRUQiLCJQQVlMT0FEX1RPT19MQVJHRSIsIlVOUFJPQ0VTU0FCTEVfQ09OVEVOVCIsIlRPT19NQU5ZX1JFUVVFU1RTIiwiQ0xJRU5UX0NMT1NFRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiZ2V0U3RhdHVzQ29kZUZyb21LZXkiLCJjb2RlIiwiZ2V0SFRUUFN0YXR1c0NvZGUiLCJqc29uIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiaHR0cFN0YXR1c2VzIiwiU2V0IiwibWFwIiwicmVzIiwiZGF0YSIsImVycm9yIiwiaHR0cFN0YXR1cyIsInNpemUiLCJ2YWx1ZXMiLCJuZXh0IiwidmFsdWUiLCJnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciIsIm5vb3AiLCJjcmVhdGVJbm5lclByb3h5IiwiY2FsbGJhY2siLCJwYXRoIiwicHJveHkiLCJQcm94eSIsImdldCIsIl9vYmoiLCJrZXkiLCJ1bmRlZmluZWQiLCJhcHBseSIsIl8xIiwiXzIiLCJhcmdzIiwiaXNBcHBseSIsImxlbmd0aCIsInNsaWNlIiwiY3JlYXRlUmVjdXJzaXZlUHJveHkiLCJjcmVhdGVGbGF0UHJveHkiLCJuYW1lIiwiYSIsImIiLCJjIiwiZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/index.mjs":
/*!******************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCError: () => (/* reexport safe */ _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T),\n/* harmony export */   callProcedure: () => (/* reexport safe */ _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   createInputMiddleware: () => (/* binding */ createInputMiddleware),\n/* harmony export */   createOutputMiddleware: () => (/* binding */ createOutputMiddleware),\n/* harmony export */   defaultTransformer: () => (/* reexport safe */ _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   experimental_standaloneMiddleware: () => (/* binding */ experimental_standaloneMiddleware),\n/* harmony export */   getDataTransformer: () => (/* reexport safe */ _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   getTRPCErrorFromUnknown: () => (/* reexport safe */ _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   initTRPC: () => (/* binding */ initTRPC),\n/* harmony export */   procedureTypes: () => (/* reexport safe */ _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   router: () => (/* binding */ router)\n/* harmony export */ });\n/* harmony import */ var _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-cd32070b.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/config-cd32070b.mjs\");\n/* harmony import */ var _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCError-6a1653a4.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-6a1653a4.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n\n\n\n/**\n * @deprecated\n */ const middlewareMarker$1 = \"middlewareMarker\";\nfunction getParseFn$1(procedureParser) {\n    const parser = procedureParser;\n    if (typeof parser === \"function\") {\n        // ProcedureParserCustomValidatorEsque\n        return parser;\n    }\n    if (typeof parser.parseAsync === \"function\") {\n        // ProcedureParserZodEsque\n        return parser.parseAsync.bind(parser);\n    }\n    if (typeof parser.parse === \"function\") {\n        // ProcedureParserZodEsque\n        return parser.parse.bind(parser);\n    }\n    if (typeof parser.validateSync === \"function\") {\n        // ProcedureParserYupEsque\n        return parser.validateSync.bind(parser);\n    }\n    if (typeof parser.create === \"function\") {\n        // ProcedureParserSuperstructEsque\n        return parser.create.bind(parser);\n    }\n    throw new Error(\"Could not find a validator fn\");\n}\n/**\n * @internal\n * @deprecated\n */ class Procedure {\n    _def() {\n        return {\n            middlewares: this.middlewares,\n            resolver: this.resolver,\n            inputParser: this.inputParser,\n            outputParser: this.outputParser,\n            meta: this.meta\n        };\n    }\n    async parseInput(rawInput) {\n        try {\n            return await this.parseInputFn(rawInput);\n        } catch (cause) {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                cause\n            });\n        }\n    }\n    async parseOutput(rawOutput) {\n        try {\n            return await this.parseOutputFn(rawOutput);\n        } catch (cause) {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause,\n                message: \"Output validation failed\"\n            });\n        }\n    }\n    /**\n   * Trigger middlewares in order, parse raw input, call resolver & parse raw output\n   * @internal\n   */ async call(opts) {\n        // wrap the actual resolver and treat as the last \"middleware\"\n        const middlewaresWithResolver = this.middlewares.concat([\n            async ({ ctx })=>{\n                const input = await this.parseInput(opts.rawInput);\n                const rawOutput = await this.resolver({\n                    ...opts,\n                    ctx,\n                    input\n                });\n                const data = await this.parseOutput(rawOutput);\n                return {\n                    marker: middlewareMarker$1,\n                    ok: true,\n                    data,\n                    ctx\n                };\n            }\n        ]);\n        // run the middlewares recursively with the resolver as the last one\n        const callRecursive = async (callOpts = {\n            index: 0,\n            ctx: opts.ctx\n        })=>{\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const result = await middlewaresWithResolver[callOpts.index]({\n                    ctx: callOpts.ctx,\n                    type: opts.type,\n                    path: opts.path,\n                    rawInput: opts.rawInput,\n                    meta: this.meta,\n                    next: async (nextOpts)=>{\n                        return await callRecursive({\n                            index: callOpts.index + 1,\n                            ctx: nextOpts ? nextOpts.ctx : callOpts.ctx\n                        });\n                    }\n                });\n                return result;\n            } catch (cause) {\n                return {\n                    ctx: callOpts.ctx,\n                    ok: false,\n                    error: (0,_TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause),\n                    marker: middlewareMarker$1\n                };\n            }\n        };\n        // there's always at least one \"next\" since we wrap this.resolver in a middleware\n        const result = await callRecursive();\n        if (!result) {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"No result from middlewares - did you forget to `return next()`?\"\n            });\n        }\n        if (!result.ok) {\n            // re-throw original error\n            throw result.error;\n        }\n        return result.data;\n    }\n    /**\n   * Create new procedure with passed middlewares\n   * @param middlewares\n   */ inheritMiddlewares(middlewares) {\n        const Constructor = this.constructor;\n        const instance = new Constructor({\n            middlewares: [\n                ...middlewares,\n                ...this.middlewares\n            ],\n            resolver: this.resolver,\n            inputParser: this.inputParser,\n            outputParser: this.outputParser,\n            meta: this.meta\n        });\n        return instance;\n    }\n    constructor(opts){\n        this.middlewares = opts.middlewares;\n        this.resolver = opts.resolver;\n        this.inputParser = opts.inputParser;\n        this.parseInputFn = getParseFn$1(this.inputParser);\n        this.outputParser = opts.outputParser;\n        this.parseOutputFn = getParseFn$1(this.outputParser);\n        this.meta = opts.meta;\n    }\n}\nfunction createProcedure(opts) {\n    const inputParser = \"input\" in opts ? opts.input : (input)=>{\n        if (input != null) {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                message: \"No input expected\"\n            });\n        }\n        return undefined;\n    };\n    const outputParser = \"output\" in opts && opts.output ? opts.output : (output)=>output;\n    return new Procedure({\n        inputParser: inputParser,\n        resolver: opts.resolve,\n        middlewares: [],\n        outputParser: outputParser,\n        meta: opts.meta\n    });\n}\nfunction getParseFn(procedureParser) {\n    const parser = procedureParser;\n    if (typeof parser === \"function\") {\n        // ParserCustomValidatorEsque\n        return parser;\n    }\n    if (typeof parser.parseAsync === \"function\") {\n        // ParserZodEsque\n        return parser.parseAsync.bind(parser);\n    }\n    if (typeof parser.parse === \"function\") {\n        // ParserZodEsque\n        // ParserValibotEsque (<= v0.12.X)\n        return parser.parse.bind(parser);\n    }\n    if (typeof parser.validateSync === \"function\") {\n        // ParserYupEsque\n        return parser.validateSync.bind(parser);\n    }\n    if (typeof parser.create === \"function\") {\n        // ParserSuperstructEsque\n        return parser.create.bind(parser);\n    }\n    if (typeof parser.assert === \"function\") {\n        // ParserScaleEsque\n        return (value)=>{\n            parser.assert(value);\n            return value;\n        };\n    }\n    throw new Error(\"Could not find a validator fn\");\n}\n/**\n * @deprecated only for backwards compat\n * @internal\n */ function getParseFnOrPassThrough(procedureParser) {\n    if (!procedureParser) {\n        return (v)=>v;\n    }\n    return getParseFn(procedureParser);\n}\n/**\n * Ensures there are no duplicate keys when building a procedure.\n */ function mergeWithoutOverrides(obj1, ...objs) {\n    const newObj = Object.assign(Object.create(null), obj1);\n    for (const overrides of objs){\n        for(const key in overrides){\n            if (key in newObj && newObj[key] !== overrides[key]) {\n                throw new Error(`Duplicate key ${key}`);\n            }\n            newObj[key] = overrides[key];\n        }\n    }\n    return newObj;\n}\n/**\n * @internal\n */ function createMiddlewareFactory() {\n    function createMiddlewareInner(middlewares) {\n        return {\n            _middlewares: middlewares,\n            unstable_pipe (middlewareBuilderOrFn) {\n                const pipedMiddleware = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                    middlewareBuilderOrFn\n                ];\n                return createMiddlewareInner([\n                    ...middlewares,\n                    ...pipedMiddleware\n                ]);\n            }\n        };\n    }\n    function createMiddleware(fn) {\n        return createMiddlewareInner([\n            fn\n        ]);\n    }\n    return createMiddleware;\n}\nconst experimental_standaloneMiddleware = ()=>({\n        create: createMiddlewareFactory()\n    });\nfunction isPlainObject(obj) {\n    return obj && typeof obj === \"object\" && !Array.isArray(obj);\n}\n/**\n * @internal\n * Please note, `trpc-openapi` uses this function.\n */ function createInputMiddleware(parse) {\n    const inputMiddleware = async ({ next, rawInput, input })=>{\n        let parsedInput;\n        try {\n            parsedInput = await parse(rawInput);\n        } catch (cause) {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                cause\n            });\n        }\n        // Multiple input parsers\n        const combinedInput = isPlainObject(input) && isPlainObject(parsedInput) ? {\n            ...input,\n            ...parsedInput\n        } : parsedInput;\n        // TODO fix this typing?\n        return next({\n            input: combinedInput\n        });\n    };\n    inputMiddleware._type = \"input\";\n    return inputMiddleware;\n}\n/**\n * @internal\n */ function createOutputMiddleware(parse) {\n    const outputMiddleware = async ({ next })=>{\n        const result = await next();\n        if (!result.ok) {\n            // pass through failures without validating\n            return result;\n        }\n        try {\n            const data = await parse(result.data);\n            return {\n                ...result,\n                data\n            };\n        } catch (cause) {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: \"Output validation failed\",\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause\n            });\n        }\n    };\n    outputMiddleware._type = \"output\";\n    return outputMiddleware;\n}\n/**\n * @internal\n */ const middlewareMarker = \"middlewareMarker\";\nfunction createNewBuilder(def1, def2) {\n    const { middlewares = [], inputs, meta, ...rest } = def2;\n    // TODO: maybe have a fn here to warn about calls\n    return createBuilder({\n        ...mergeWithoutOverrides(def1, rest),\n        inputs: [\n            ...def1.inputs,\n            ...inputs ?? []\n        ],\n        middlewares: [\n            ...def1.middlewares,\n            ...middlewares\n        ],\n        meta: def1.meta && meta ? {\n            ...def1.meta,\n            ...meta\n        } : meta ?? def1.meta\n    });\n}\nfunction createBuilder(initDef = {}) {\n    const _def = {\n        inputs: [],\n        middlewares: [],\n        ...initDef\n    };\n    return {\n        _def,\n        input (input) {\n            const parser = getParseFn(input);\n            return createNewBuilder(_def, {\n                inputs: [\n                    input\n                ],\n                middlewares: [\n                    createInputMiddleware(parser)\n                ]\n            });\n        },\n        output (output) {\n            const parseOutput = getParseFn(output);\n            return createNewBuilder(_def, {\n                output,\n                middlewares: [\n                    createOutputMiddleware(parseOutput)\n                ]\n            });\n        },\n        meta (meta) {\n            return createNewBuilder(_def, {\n                meta: meta\n            });\n        },\n        /**\n     * @deprecated\n     * This functionality is deprecated and will be removed in the next major version.\n     */ unstable_concat (builder) {\n            return createNewBuilder(_def, builder._def);\n        },\n        use (middlewareBuilderOrFn) {\n            // Distinguish between a middleware builder and a middleware function\n            const middlewares = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                middlewareBuilderOrFn\n            ];\n            return createNewBuilder(_def, {\n                middlewares: middlewares\n            });\n        },\n        query (resolver) {\n            return createResolver({\n                ..._def,\n                query: true\n            }, resolver);\n        },\n        mutation (resolver) {\n            return createResolver({\n                ..._def,\n                mutation: true\n            }, resolver);\n        },\n        subscription (resolver) {\n            return createResolver({\n                ..._def,\n                subscription: true\n            }, resolver);\n        }\n    };\n}\nfunction createResolver(_def, resolver) {\n    const finalBuilder = createNewBuilder(_def, {\n        resolver,\n        middlewares: [\n            async function resolveMiddleware(opts) {\n                const data = await resolver(opts);\n                return {\n                    marker: middlewareMarker,\n                    ok: true,\n                    data,\n                    ctx: opts.ctx\n                };\n            }\n        ]\n    });\n    return createProcedureCaller(finalBuilder._def);\n}\nconst codeblock = `\nIf you want to call this function on the server, you do the following:\nThis is a client-only function.\n\nconst caller = appRouter.createCaller({\n  /* ... your context */\n});\n\nconst result = await caller.call('myProcedure', input);\n`.trim();\nfunction createProcedureCaller(_def) {\n    const procedure = async function resolve(opts) {\n        // is direct server-side call\n        if (!opts || !(\"rawInput\" in opts)) {\n            throw new Error(codeblock);\n        }\n        // run the middlewares recursively with the resolver as the last one\n        const callRecursive = async (callOpts = {\n            index: 0,\n            ctx: opts.ctx\n        })=>{\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const middleware = _def.middlewares[callOpts.index];\n                const result = await middleware({\n                    ctx: callOpts.ctx,\n                    type: opts.type,\n                    path: opts.path,\n                    rawInput: callOpts.rawInput ?? opts.rawInput,\n                    meta: _def.meta,\n                    input: callOpts.input,\n                    next (_nextOpts) {\n                        const nextOpts = _nextOpts;\n                        return callRecursive({\n                            index: callOpts.index + 1,\n                            ctx: nextOpts && \"ctx\" in nextOpts ? {\n                                ...callOpts.ctx,\n                                ...nextOpts.ctx\n                            } : callOpts.ctx,\n                            input: nextOpts && \"input\" in nextOpts ? nextOpts.input : callOpts.input,\n                            rawInput: nextOpts && \"rawInput\" in nextOpts ? nextOpts.rawInput : callOpts.rawInput\n                        });\n                    }\n                });\n                return result;\n            } catch (cause) {\n                return {\n                    ok: false,\n                    error: (0,_TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause),\n                    marker: middlewareMarker\n                };\n            }\n        };\n        // there's always at least one \"next\" since we wrap this.resolver in a middleware\n        const result = await callRecursive();\n        if (!result) {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"No result from middlewares - did you forget to `return next()`?\"\n            });\n        }\n        if (!result.ok) {\n            // re-throw original error\n            throw result.error;\n        }\n        return result.data;\n    };\n    procedure._def = _def;\n    procedure.meta = _def.meta;\n    return procedure;\n}\nfunction migrateProcedure(oldProc, type) {\n    const def = oldProc._def();\n    const inputParser = getParseFnOrPassThrough(def.inputParser);\n    const outputParser = getParseFnOrPassThrough(def.outputParser);\n    const inputMiddleware = createInputMiddleware(inputParser);\n    const builder = createBuilder({\n        inputs: [\n            def.inputParser\n        ],\n        middlewares: [\n            ...def.middlewares,\n            inputMiddleware,\n            createOutputMiddleware(outputParser)\n        ],\n        meta: def.meta,\n        output: def.outputParser,\n        mutation: type === \"mutation\",\n        query: type === \"query\",\n        subscription: type === \"subscription\"\n    });\n    const proc = builder[type]((opts)=>def.resolver(opts));\n    return proc;\n}\nfunction migrateRouter(oldRouter) {\n    const errorFormatter = oldRouter._def.errorFormatter;\n    const transformer = oldRouter._def.transformer;\n    const queries = {};\n    const mutations = {};\n    const subscriptions = {};\n    for (const [name, procedure] of Object.entries(oldRouter._def.queries)){\n        queries[name] = migrateProcedure(procedure, \"query\");\n    }\n    for (const [name1, procedure1] of Object.entries(oldRouter._def.mutations)){\n        mutations[name1] = migrateProcedure(procedure1, \"mutation\");\n    }\n    for (const [name2, procedure2] of Object.entries(oldRouter._def.subscriptions)){\n        subscriptions[name2] = migrateProcedure(procedure2, \"subscription\");\n    }\n    const procedures = mergeWithoutOverrides(queries, mutations, subscriptions);\n    const newRouter = (0,_config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n        transformer,\n        errorFormatter,\n        isDev: \"development\" !== \"production\"\n    })(procedures);\n    return newRouter;\n}\nfunction getDataTransformer(transformer) {\n    if (\"input\" in transformer) {\n        return transformer;\n    }\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\nconst PROCEDURE_DEFINITION_MAP = {\n    query: \"queries\",\n    mutation: \"mutations\",\n    subscription: \"subscriptions\"\n};\nfunction safeObject(...args) {\n    return Object.assign(Object.create(null), ...args);\n}\n/**\n * @internal The type signature of this class may change without warning.\n * @deprecated\n */ class Router {\n    static prefixProcedures(procedures, prefix) {\n        const eps = safeObject();\n        for (const [key, procedure] of Object.entries(procedures)){\n            eps[prefix + key] = procedure;\n        }\n        return eps;\n    }\n    query(path, procedure) {\n        const router = new Router({\n            queries: safeObject({\n                [path]: createProcedure(procedure)\n            })\n        });\n        return this.merge(router);\n    }\n    mutation(path, procedure) {\n        const router = new Router({\n            mutations: safeObject({\n                [path]: createProcedure(procedure)\n            })\n        });\n        return this.merge(router);\n    }\n    subscription(path, procedure) {\n        const router = new Router({\n            subscriptions: safeObject({\n                [path]: createProcedure(procedure)\n            })\n        });\n        return this.merge(router);\n    }\n    merge(prefixOrRouter, maybeRouter) {\n        let prefix = \"\";\n        let childRouter;\n        if (typeof prefixOrRouter === \"string\" && maybeRouter instanceof Router) {\n            prefix = prefixOrRouter;\n            childRouter = maybeRouter;\n        } else if (prefixOrRouter instanceof Router) {\n            childRouter = prefixOrRouter;\n        } else {\n            throw new Error(\"Invalid args\");\n        }\n        const duplicateQueries = Object.keys(childRouter._def.queries).filter((key)=>!!this._def.queries[prefix + key]);\n        const duplicateMutations = Object.keys(childRouter._def.mutations).filter((key)=>!!this._def.mutations[prefix + key]);\n        const duplicateSubscriptions = Object.keys(childRouter._def.subscriptions).filter((key)=>!!this._def.subscriptions[prefix + key]);\n        const duplicates = [\n            ...duplicateQueries,\n            ...duplicateMutations,\n            ...duplicateSubscriptions\n        ];\n        if (duplicates.length) {\n            throw new Error(`Duplicate endpoint(s): ${duplicates.join(\", \")}`);\n        }\n        const mergeProcedures = (defs)=>{\n            const newDefs = safeObject();\n            for (const [key, procedure] of Object.entries(defs)){\n                const newProcedure = procedure.inheritMiddlewares(this._def.middlewares);\n                newDefs[key] = newProcedure;\n            }\n            return Router.prefixProcedures(newDefs, prefix);\n        };\n        return new Router({\n            ...this._def,\n            queries: safeObject(this._def.queries, mergeProcedures(childRouter._def.queries)),\n            mutations: safeObject(this._def.mutations, mergeProcedures(childRouter._def.mutations)),\n            subscriptions: safeObject(this._def.subscriptions, mergeProcedures(childRouter._def.subscriptions))\n        });\n    }\n    /**\n   * Invoke procedure. Only for internal use within library.\n   */ async call(opts) {\n        const { type, path } = opts;\n        const defTarget = PROCEDURE_DEFINITION_MAP[type];\n        const defs = this._def[defTarget];\n        const procedure = defs[path];\n        if (!procedure) {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"NOT_FOUND\",\n                message: `No \"${type}\"-procedure on path \"${path}\"`\n            });\n        }\n        return procedure.call(opts);\n    }\n    createCaller(ctx) {\n        return {\n            query: (path, ...args)=>{\n                return this.call({\n                    type: \"query\",\n                    ctx,\n                    path,\n                    rawInput: args[0]\n                });\n            },\n            mutation: (path, ...args)=>{\n                return this.call({\n                    type: \"mutation\",\n                    ctx,\n                    path,\n                    rawInput: args[0]\n                });\n            },\n            subscription: (path, ...args)=>{\n                return this.call({\n                    type: \"subscription\",\n                    ctx,\n                    path,\n                    rawInput: args[0]\n                });\n            }\n        };\n    }\n    /**\n   * Function to be called before any procedure is invoked\n   * @link https://trpc.io/docs/middlewares\n   */ middleware(middleware) {\n        return new Router({\n            ...this._def,\n            middlewares: [\n                ...this._def.middlewares,\n                middleware\n            ]\n        });\n    }\n    /**\n   * Format errors\n   * @link https://trpc.io/docs/error-formatting\n   */ formatError(errorFormatter) {\n        if (this._def.errorFormatter !== _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.d) {\n            throw new Error(\"You seem to have double `formatError()`-calls in your router tree\");\n        }\n        return new Router({\n            ...this._def,\n            errorFormatter: errorFormatter\n        });\n    }\n    getErrorShape(opts) {\n        const { path, error } = opts;\n        const { code } = opts.error;\n        const shape = {\n            message: error.message,\n            code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__.T[code],\n            data: {\n                code,\n                httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(error)\n            }\n        };\n        if (globalThis.process?.env?.NODE_ENV !== \"production\" && typeof opts.error.stack === \"string\") {\n            shape.data.stack = opts.error.stack;\n        }\n        if (typeof path === \"string\") {\n            shape.data.path = path;\n        }\n        return this._def.errorFormatter({\n            ...opts,\n            shape\n        });\n    }\n    /**\n   * Add data transformer to serialize/deserialize input args + output\n   * @link https://trpc.io/docs/data-transformers\n   */ transformer(_transformer) {\n        const transformer = getDataTransformer(_transformer);\n        if (this._def.transformer !== _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.a) {\n            throw new Error(\"You seem to have double `transformer()`-calls in your router tree\");\n        }\n        return new Router({\n            ...this._def,\n            transformer\n        });\n    }\n    /**\n   * Flattens the generics of TQueries/TMutations/TSubscriptions.\n   * ⚠️ Experimental - might disappear. ⚠️\n   *\n   * @alpha\n   */ flat() {\n        return this;\n    }\n    /**\n   * Interop mode for v9.x -> v10.x\n   */ interop() {\n        return migrateRouter(this);\n    }\n    constructor(def){\n        this._def = {\n            queries: def?.queries ?? safeObject(),\n            mutations: def?.mutations ?? safeObject(),\n            subscriptions: def?.subscriptions ?? safeObject(),\n            middlewares: def?.middlewares ?? [],\n            errorFormatter: def?.errorFormatter ?? _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.d,\n            transformer: def?.transformer ?? _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.a\n        };\n    }\n}\n/**\n * @deprecated\n */ function router() {\n    return new Router();\n}\nfunction mergeRouters(...routerList) {\n    const record = mergeWithoutOverrides({}, ...routerList.map((r)=>r._def.record));\n    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{\n        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.d) {\n            if (currentErrorFormatter !== _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.d && currentErrorFormatter !== nextRouter._def._config.errorFormatter) {\n                throw new Error(\"You seem to have several error formatters\");\n            }\n            return nextRouter._def._config.errorFormatter;\n        }\n        return currentErrorFormatter;\n    }, _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.d);\n    const transformer = routerList.reduce((prev, current)=>{\n        if (current._def._config.transformer && current._def._config.transformer !== _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.a) {\n            if (prev !== _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.a && prev !== current._def._config.transformer) {\n                throw new Error(\"You seem to have several transformers\");\n            }\n            return current._def._config.transformer;\n        }\n        return prev;\n    }, _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.a);\n    const router = (0,_config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n        errorFormatter,\n        transformer,\n        isDev: routerList.some((r)=>r._def._config.isDev),\n        allowOutsideOfServer: routerList.some((r)=>r._def._config.allowOutsideOfServer),\n        isServer: routerList.some((r)=>r._def._config.isServer),\n        $types: routerList[0]?._def._config.$types\n    })(record);\n    return router;\n}\n/**\n * TODO: This can be improved:\n * - We should be able to chain `.meta()`/`.context()` only once\n * - Simplify typings\n * - Doesn't need to be a class but it doesn't really hurt either\n */ class TRPCBuilder {\n    context() {\n        return new TRPCBuilder();\n    }\n    meta() {\n        return new TRPCBuilder();\n    }\n    create(options) {\n        return createTRPCInner()(options);\n    }\n}\n/**\n * Initialize tRPC - done exactly once per backend\n */ const initTRPC = new TRPCBuilder();\nfunction createTRPCInner() {\n    return function initTRPCInner(runtime) {\n        const errorFormatter = runtime?.errorFormatter ?? _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.d;\n        const transformer = (0,_config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(runtime?.transformer ?? _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.a);\n        const config = {\n            transformer,\n            isDev: runtime?.isDev ?? globalThis.process?.env?.NODE_ENV !== \"production\",\n            allowOutsideOfServer: runtime?.allowOutsideOfServer ?? false,\n            errorFormatter,\n            isServer: runtime?.isServer ?? _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.i,\n            /**\n       * @internal\n       */ $types: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_2__.c)((key)=>{\n                throw new Error(`Tried to access \"$types.${key}\" which is not available at runtime`);\n            })\n        };\n        {\n            // Server check\n            const isServer = runtime?.isServer ?? _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.i;\n            if (!isServer && runtime?.allowOutsideOfServer !== true) {\n                throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);\n            }\n        }\n        return {\n            /**\n       * These are just types, they can't be used\n       * @internal\n       */ _config: config,\n            /**\n       * Builder object for creating procedures\n       */ procedure: createBuilder({\n                meta: runtime?.defaultMeta\n            }),\n            /**\n       * Create reusable middlewares\n       */ middleware: createMiddlewareFactory(),\n            /**\n       * Create a router\n       */ router: (0,_config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(config),\n            /**\n       * Merge Routers\n       */ mergeRouters\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/resolveHTTPResponse-67085326.mjs":
/*!*****************************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/resolveHTTPResponse-67085326.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   r: () => (/* binding */ resolveHTTPResponse)\n/* harmony export */ });\n/* harmony import */ var _config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-cd32070b.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/config-cd32070b.mjs\");\n/* harmony import */ var _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCError-6a1653a4.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-6a1653a4.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transformTRPCResponse-1153b421.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _contentType_53e30af8_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contentType-53e30af8.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/contentType-53e30af8.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n\n\n\n\n\nconst HTTP_METHOD_PROCEDURE_TYPE_MAP = {\n    GET: \"query\",\n    POST: \"mutation\"\n};\nconst fallbackContentTypeHandler = {\n    getInputs: _contentType_53e30af8_mjs__WEBPACK_IMPORTED_MODULE_3__.g\n};\nfunction initResponse(initOpts) {\n    const { ctx, paths, type, responseMeta, untransformedJSON, errors = [] } = initOpts;\n    let status = untransformedJSON ? (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_4__.b)(untransformedJSON) : 200;\n    const headers = {\n        \"Content-Type\": \"application/json\"\n    };\n    const eagerGeneration = !untransformedJSON;\n    const data = eagerGeneration ? [] : Array.isArray(untransformedJSON) ? untransformedJSON : [\n        untransformedJSON\n    ];\n    const meta = responseMeta?.({\n        ctx,\n        paths,\n        type,\n        data,\n        errors,\n        eagerGeneration\n    }) ?? {};\n    for (const [key, value] of Object.entries(meta.headers ?? {})){\n        headers[key] = value;\n    }\n    if (meta.status) {\n        status = meta.status;\n    }\n    return {\n        status,\n        headers\n    };\n}\nasync function inputToProcedureCall(procedureOpts) {\n    const { opts, ctx, type, input, path } = procedureOpts;\n    try {\n        const data = await (0,_config_cd32070b_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({\n            procedures: opts.router._def.procedures,\n            path,\n            rawInput: input,\n            ctx,\n            type\n        });\n        return {\n            result: {\n                data\n            }\n        };\n    } catch (cause) {\n        const error = (0,_TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause);\n        opts.onError?.({\n            error,\n            path,\n            input,\n            ctx,\n            type: type,\n            req: opts.req\n        });\n        return {\n            error: (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.g)({\n                config: opts.router._def._config,\n                error,\n                type,\n                path,\n                input,\n                ctx\n            })\n        };\n    }\n}\nfunction caughtErrorToData(cause, errorOpts) {\n    const { router, req, onError } = errorOpts.opts;\n    const error = (0,_TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause);\n    onError?.({\n        error,\n        path: errorOpts.path,\n        input: errorOpts.input,\n        ctx: errorOpts.ctx,\n        type: errorOpts.type,\n        req\n    });\n    const untransformedJSON = {\n        error: (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.g)({\n            config: router._def._config,\n            error,\n            type: errorOpts.type,\n            path: errorOpts.path,\n            input: errorOpts.input,\n            ctx: errorOpts.ctx\n        })\n    };\n    const transformedJSON = (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(router._def._config, untransformedJSON);\n    const body = JSON.stringify(transformedJSON);\n    return {\n        error,\n        untransformedJSON,\n        body\n    };\n}\n// implementation\nasync function resolveHTTPResponse(opts) {\n    const { router, req, unstable_onHead, unstable_onChunk } = opts;\n    if (req.method === \"HEAD\") {\n        // can be used for lambda warmup\n        const headResponse = {\n            status: 204\n        };\n        unstable_onHead?.(headResponse, false);\n        unstable_onChunk?.([\n            -1,\n            \"\"\n        ]);\n        return headResponse;\n    }\n    const contentTypeHandler = opts.contentTypeHandler ?? fallbackContentTypeHandler;\n    const batchingEnabled = opts.batching?.enabled ?? true;\n    const type = HTTP_METHOD_PROCEDURE_TYPE_MAP[req.method] ?? \"unknown\";\n    let ctx = undefined;\n    let paths;\n    const isBatchCall = !!req.query.get(\"batch\");\n    const isStreamCall = isBatchCall && unstable_onHead && unstable_onChunk && req.headers[\"trpc-batch-mode\"] === \"stream\";\n    try {\n        // we create context first so that (unless `createContext()` throws)\n        // error handler may access context information\n        //\n        // this way even if the client sends malformed input that might cause an exception:\n        //  - `opts.error` has value,\n        //  - batching is not enabled,\n        //  - `type` is unknown,\n        //  - `getInputs` throws because of malformed JSON,\n        // context value is still available to the error handler\n        ctx = await opts.createContext();\n        if (opts.error) {\n            throw opts.error;\n        }\n        if (isBatchCall && !batchingEnabled) {\n            throw new Error(`Batching is not enabled on the server`);\n        }\n        /* istanbul ignore if -- @preserve */ if (type === \"subscription\") {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: \"Subscriptions should use wsLink\",\n                code: \"METHOD_NOT_SUPPORTED\"\n            });\n        }\n        if (type === \"unknown\") {\n            throw new _TRPCError_6a1653a4_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: `Unexpected request method ${req.method}`,\n                code: \"METHOD_NOT_SUPPORTED\"\n            });\n        }\n        const inputs = await contentTypeHandler.getInputs({\n            isBatchCall,\n            req,\n            router,\n            preprocessedBody: opts.preprocessedBody ?? false\n        });\n        paths = isBatchCall ? decodeURIComponent(opts.path).split(\",\") : [\n            opts.path\n        ];\n        const promises = paths.map((path, index)=>inputToProcedureCall({\n                opts,\n                ctx,\n                type,\n                input: inputs[index],\n                path\n            }));\n        if (!isStreamCall) {\n            /**\n       * Non-streaming response:\n       * - await all responses in parallel, blocking on the slowest one\n       * - create headers with known response body\n       * - return a complete HTTPResponse\n       */ const untransformedJSON = await Promise.all(promises);\n            const errors = untransformedJSON.flatMap((response)=>\"error\" in response ? [\n                    response.error\n                ] : []);\n            const headResponse1 = initResponse({\n                ctx,\n                paths,\n                type,\n                responseMeta: opts.responseMeta,\n                untransformedJSON,\n                errors\n            });\n            unstable_onHead?.(headResponse1, false);\n            // return body stuff\n            const result = isBatchCall ? untransformedJSON : untransformedJSON[0]; // eslint-disable-line @typescript-eslint/no-non-null-assertion -- `untransformedJSON` should be the length of `paths` which should be at least 1 otherwise there wouldn't be a request at all\n            const transformedJSON = (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(router._def._config, result);\n            const body = JSON.stringify(transformedJSON);\n            unstable_onChunk?.([\n                -1,\n                body\n            ]);\n            return {\n                status: headResponse1.status,\n                headers: headResponse1.headers,\n                body\n            };\n        }\n        /**\n     * Streaming response:\n     * - block on none, call `onChunk` as soon as each response is ready\n     * - create headers with minimal data (cannot know the response body in advance)\n     * - return void\n     */ const headResponse2 = initResponse({\n            ctx,\n            paths,\n            type,\n            responseMeta: opts.responseMeta\n        });\n        unstable_onHead(headResponse2, true);\n        const indexedPromises = new Map(promises.map((promise, index)=>[\n                index,\n                promise.then((r)=>[\n                        index,\n                        r\n                    ])\n            ]));\n        for (const _ of paths){\n            const [index, untransformedJSON1] = await Promise.race(indexedPromises.values());\n            indexedPromises.delete(index);\n            try {\n                const transformedJSON1 = (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(router._def._config, untransformedJSON1);\n                const body1 = JSON.stringify(transformedJSON1);\n                unstable_onChunk([\n                    index,\n                    body1\n                ]);\n            } catch (cause) {\n                const path = paths[index];\n                const input = inputs[index];\n                const { body: body2 } = caughtErrorToData(cause, {\n                    opts,\n                    ctx,\n                    type,\n                    path,\n                    input\n                });\n                unstable_onChunk([\n                    index,\n                    body2\n                ]);\n            }\n        }\n        return;\n    } catch (cause1) {\n        // we get here if\n        // - batching is called when it's not enabled\n        // - `createContext()` throws\n        // - `router._def._config.transformer.output.serialize()` throws\n        // - post body is too large\n        // - input deserialization fails\n        // - `errorFormatter` return value is malformed\n        const { error, untransformedJSON: untransformedJSON2, body: body3 } = caughtErrorToData(cause1, {\n            opts,\n            ctx,\n            type\n        });\n        const headResponse3 = initResponse({\n            ctx,\n            paths,\n            type,\n            responseMeta: opts.responseMeta,\n            untransformedJSON: untransformedJSON2,\n            errors: [\n                error\n            ]\n        });\n        unstable_onHead?.(headResponse3, false);\n        unstable_onChunk?.([\n            -1,\n            body3\n        ]);\n        return {\n            status: headResponse3.status,\n            headers: headResponse3.headers,\n            body: body3\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/resolveHTTPResponse-67085326.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs":
/*!*******************************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getErrorShape),\n/* harmony export */   t: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n/**\n * @internal\n */ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__.T[code],\n        data: {\n            code,\n            httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") {\n        shape.data.stack = opts.error.stack;\n    }\n    if (typeof path === \"string\") {\n        shape.data.path = path;\n    }\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) {\n        return {\n            ...item,\n            error: config.transformer.output.serialize(item.error)\n        };\n    }\n    if (\"data\" in item.result) {\n        return {\n            ...item,\n            result: {\n                ...item.result,\n                data: config.transformer.output.serialize(item.result.data)\n            }\n        };\n    }\n    return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3RyYW5zZm9ybVRSUENSZXNwb25zZS0xMTUzYjQyMS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RTtBQUNIO0FBRXBFOztDQUVDLEdBQUcsU0FBU0ksY0FBY0MsSUFBSTtJQUMzQixNQUFNLEVBQUVDLElBQUksRUFBR0MsS0FBSyxFQUFHQyxNQUFNLEVBQUcsR0FBR0g7SUFDbkMsTUFBTSxFQUFFSSxJQUFJLEVBQUcsR0FBR0osS0FBS0UsS0FBSztJQUM1QixNQUFNRyxRQUFRO1FBQ1ZDLFNBQVNKLE1BQU1JLE9BQU87UUFDdEJGLE1BQU1OLGtEQUF1QixDQUFDTSxLQUFLO1FBQ25DRyxNQUFNO1lBQ0ZIO1lBQ0FJLFlBQVlaLHNEQUEwQkEsQ0FBQ007UUFDM0M7SUFDSjtJQUNBLElBQUlDLE9BQU9NLEtBQUssSUFBSSxPQUFPVCxLQUFLRSxLQUFLLENBQUNRLEtBQUssS0FBSyxVQUFVO1FBQ3RETCxNQUFNRSxJQUFJLENBQUNHLEtBQUssR0FBR1YsS0FBS0UsS0FBSyxDQUFDUSxLQUFLO0lBQ3ZDO0lBQ0EsSUFBSSxPQUFPVCxTQUFTLFVBQVU7UUFDMUJJLE1BQU1FLElBQUksQ0FBQ04sSUFBSSxHQUFHQTtJQUN0QjtJQUNBLE9BQU9FLE9BQU9RLGNBQWMsQ0FBQztRQUN6QixHQUFHWCxJQUFJO1FBQ1BLO0lBQ0o7QUFDSjtBQUVBLFNBQVNPLDBCQUEwQlQsTUFBTSxFQUFFVSxJQUFJO0lBQzNDLElBQUksV0FBV0EsTUFBTTtRQUNqQixPQUFPO1lBQ0gsR0FBR0EsSUFBSTtZQUNQWCxPQUFPQyxPQUFPVyxXQUFXLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDSCxLQUFLWCxLQUFLO1FBQ3pEO0lBQ0o7SUFDQSxJQUFJLFVBQVVXLEtBQUtJLE1BQU0sRUFBRTtRQUN2QixPQUFPO1lBQ0gsR0FBR0osSUFBSTtZQUNQSSxRQUFRO2dCQUNKLEdBQUdKLEtBQUtJLE1BQU07Z0JBQ2RWLE1BQU1KLE9BQU9XLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNILEtBQUtJLE1BQU0sQ0FBQ1YsSUFBSTtZQUM5RDtRQUNKO0lBQ0o7SUFDQSxPQUFPTTtBQUNYO0FBQ0E7O0VBRUUsR0FBRyxTQUFTSyxzQkFBc0JmLE1BQU0sRUFBRWdCLFdBQVc7SUFDbkQsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixlQUFlQSxZQUFZRyxHQUFHLENBQUMsQ0FBQ1QsT0FBT0QsMEJBQTBCVCxRQUFRVSxTQUFTRCwwQkFBMEJULFFBQVFnQjtBQUM3STtBQUUwRCIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcz82YjlhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgfSBmcm9tICcuL2luZGV4LWY5MWQ3MjBjLm1qcyc7XG5pbXBvcnQgeyBUIGFzIFRSUENfRVJST1JfQ09ERVNfQllfS0VZIH0gZnJvbSAnLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGdldEVycm9yU2hhcGUob3B0cykge1xuICAgIGNvbnN0IHsgcGF0aCAsIGVycm9yICwgY29uZmlnICB9ID0gb3B0cztcbiAgICBjb25zdCB7IGNvZGUgIH0gPSBvcHRzLmVycm9yO1xuICAgIGNvbnN0IHNoYXBlID0ge1xuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBjb2RlOiBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWVtjb2RlXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIGh0dHBTdGF0dXM6IGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoY29uZmlnLmlzRGV2ICYmIHR5cGVvZiBvcHRzLmVycm9yLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnN0YWNrID0gb3B0cy5lcnJvci5zdGFjaztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmVycm9yRm9ybWF0dGVyKHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgc2hhcGVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiBpdGVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgZXJyb3I6IGNvbmZpZy50cmFuc2Zvcm1lci5vdXRwdXQuc2VyaWFsaXplKGl0ZW0uZXJyb3IpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgnZGF0YScgaW4gaXRlbS5yZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBkYXRhOiBjb25maWcudHJhbnNmb3JtZXIub3V0cHV0LnNlcmlhbGl6ZShpdGVtLnJlc3VsdC5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbi8qKlxuICogVGFrZXMgYSB1bnNlcmlhbGl6ZWQgYFRSUENSZXNwb25zZWAgYW5kIHNlcmlhbGl6ZXMgaXQgd2l0aCB0aGUgcm91dGVyJ3MgdHJhbnNmb3JtZXJzXG4gKiovIGZ1bmN0aW9uIHRyYW5zZm9ybVRSUENSZXNwb25zZShjb25maWcsIGl0ZW1Pckl0ZW1zKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbU9ySXRlbXMpID8gaXRlbU9ySXRlbXMubWFwKChpdGVtKT0+dHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pKSA6IHRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0oY29uZmlnLCBpdGVtT3JJdGVtcyk7XG59XG5cbmV4cG9ydCB7IGdldEVycm9yU2hhcGUgYXMgZywgdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlIGFzIHQgfTtcbiJdLCJuYW1lcyI6WyJnIiwiZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJnZXRFcnJvclNoYXBlIiwib3B0cyIsInBhdGgiLCJlcnJvciIsImNvbmZpZyIsImNvZGUiLCJzaGFwZSIsIm1lc3NhZ2UiLCJkYXRhIiwiaHR0cFN0YXR1cyIsImlzRGV2Iiwic3RhY2siLCJlcnJvckZvcm1hdHRlciIsInRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0iLCJpdGVtIiwidHJhbnNmb3JtZXIiLCJvdXRwdXQiLCJzZXJpYWxpemUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm1UUlBDUmVzcG9uc2UiLCJpdGVtT3JJdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\n");

/***/ })

};
;